//
//  MyFramework2Mocks.generated.swift
//  MyFramework2
//
//  Generated by Mockingbird v0.9.0.
//  DO NOT EDIT
//

@testable import Mockingbird
@testable import MyFramework2
import Foundation
import MyFramework
import Swift
import UIKit

private var genericTypesStaticMocks = Mockingbird.Synchronized<[String: Mockingbird.StaticMock]>([:])

// MARK: - Mocked ViewModelView2

public final class ViewModelView2Mock: MyFramework2.ViewModelView2, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.9.0", "module_name": "MyFramework2"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return stubbingContext.sourceLocation }
    set {
      stubbingContext.sourceLocation = newValue
      ViewModelView2Mock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  public enum InitializerProxy {}

  // MARK: Mocked image

  public var `image`: UIImage {
    get {
      let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "image.get", arguments: [])
      mockingContext.didInvoke(invocation)
      return (stubbingContext.implementation(for: invocation) as! () -> UIImage)()
    }
  }

  public func getImage() -> Mockingbird.Mockable<Mockingbird.VariableDeclaration, () -> UIImage, UIImage> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "image.get", arguments: [])
    return Mockingbird.Mockable<Mockingbird.VariableDeclaration, () -> UIImage, UIImage>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `myFunc`()

  public func `myFunc`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`myFunc`() -> Void", arguments: [])
    mockingContext.didInvoke(invocation)
    let implementation = stubbingContext.implementation(for: invocation, optional: true)
    if let concreteImplementation = implementation as? () -> Void {
      concreteImplementation()
    } else {
      (implementation as? () -> Void)?()
    }
  }

  public func `myFunc`() -> Mockingbird.Mockable<Mockingbird.MethodDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`myFunc`() -> Void", arguments: [])
    return Mockingbird.Mockable<Mockingbird.MethodDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Create a source-attributed `MyFramework2.ViewModelView2` class mock metatype.
public func mock(file: StaticString = #file, line: UInt = #line, _ type: MyFramework2.ViewModelView2.Protocol) -> ViewModelView2Mock.InitializerProxy.Type {
  return ViewModelView2Mock.InitializerProxy.self
}
